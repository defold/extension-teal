---@nodoc

-- Lists all warnings that can be generated by the compiler
-- and whether or not they are enabled in the config

local command <const> = require("cyan.command")
local config <const> = require("cyan.config")
local decoration <const> = require("cyan.decoration")
local log <const> = require("cyan.log")
local tl <const> = require("tl")
local util <const> = require("cyan.util")

local pad_left <const> = util.str.pad_left
local values <const>, set <const>, keys <const>, from <const>, sort <const>
   = util.tab.values, util.tab.set, util.tab.keys, util.tab.from, util.tab.sort_in_place

local function exec(_: command.Args, c: config.Config): integer
   local disable <const> = set(c.disable_warnings or {})
   local err <const> = set(c.warning_error or {})
   local longest_len = 0
   local tags <const> = sort(from(keys(tl.warning_kinds)))
   for t in values(tags) do
      if #(t as string) > longest_len then
         longest_len = #(t as string)
      end
   end
   local buf <const>: {string | decoration.Decorated} = {}
   for t in values(tags) do
      local padded <const> = pad_left(t, longest_len)
      table.insert(buf, padded)
      table.insert(buf, ": ")
      if disable[t] then
         table.insert(buf, decoration.decorate("disabled", decoration.scheme.red))
      elseif err[t] then
         table.insert(buf, decoration.decorate("enabled", decoration.scheme.green))
         table.insert(buf, " (as error)")
      else
         table.insert(buf, decoration.decorate("enabled", decoration.scheme.green))
      end
      table.insert(buf, "\n")
   end
   table.remove(buf)

   log.info(table.unpack(buf))
   return 0
end

command.new{
   name = "warnings",
   description = [[List all warnings the Teal compiler can produce and whether or not they are enabled.]],
   exec = exec,
}
